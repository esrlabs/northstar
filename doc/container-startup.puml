@startuml container-startup

create Client
activate Client

create Runtime
activate Runtime

create Forker
Runtime -> Forker: Fork
activate Forker

Client -> Runtime: Connect: Hello
Client <- Runtime: ConnectAck
Client -> Runtime: Start container
Runtime -> Runtime: Check and mount container(s)
Runtime -> Runtime: Configure container io: stdin, stdout, stderr

Runtime -> Forker: Create container

create Trampoline
Forker -> Trampoline: Fork
activate Trampoline
Trampoline -> Trampoline: Apply IO: stdin, stdout, stderr
Trampoline -> Trampoline: Create PID namespace

create Init
Trampoline -> Init: Fork

Trampoline -> Forker: Init PID
Forker -> Init: Go go go!
activate Init
Init -> Init: Mount, Pivot root, UID / GID,\nunshare(*)\ndrop privileges, file descriptors

destroy Trampoline

Forker -> Forker: reap Trampoline

Forker -> Runtime: Init PID

Runtime -> Runtime: Configure cgroups
Runtime -> Runtime: Configure debug

Runtime -> Forker: Exec container
Forker -> Init: Exec Container
create Container
Init -> Container: Fork
activate Container
Forker <- Init: Exec
Runtime <- Forker: Exec
Client <- Runtime: Started
Client <- Runtime: Notification: Started

Init -> Init: Wait for container to exit (waitpid)
Container -> Container: Set seccomp filter
Container -> : Execve(..)
...
Container -> Init: SIGCHLD
destroy Container

Init -> Init: waitpid: Exit status of container
Init -> Forker: Container exit status
destroy Init

Forker -> Runtime: Container exit status
Runtime -> Runtime: Stop PTY thread
Runtime -> Runtime: Destroy cgroups
Client <- Runtime: Notification: Exit

@enduml
