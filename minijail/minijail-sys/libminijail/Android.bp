// Copyright (C) 2015 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Common variables.
// =========================================================
libminijailSrcFiles = [
    "bpf.c",
    "libminijail.c",
    "signal_handler.c",
    "syscall_filter.c",
    "syscall_wrapper.c",
    "system.c",
    "util.c",
]

unittestSrcFiles = [
    "testrunner.cc",
]

minijailCommonLibraries = ["libcap"]

cc_defaults {
    name: "libminijailng_flags",
    cflags: [
        "-D_FILE_OFFSET_BITS=64",
        "-DALLOW_DEBUG_LOGGING",
        "-DDEFAULT_PIVOT_ROOT=\"/var/empty\"",
        "-Wall",
        "-Werror",
    ],
    target: {
        darwin: {
            enabled: false,
        },
    },
}

// Static library for generated code.
// =========================================================
cc_object {
    name: "libminijailng_gen_syscall_obj",
    vendor_available: true,
    //recovery_available: true,
    srcs: ["gen_syscalls.c"],
    cflags: [
        "-dD",
        "-E",
        "-Wall",
        "-Werror",
    ],
}

cc_genrule {
    name: "libminijailng_gen_syscall",
    vendor_available: true,
    //recovery_available: true,
    tool_files: ["gen_syscalls.sh"],
    cmd: "$(location gen_syscalls.sh) $(in) $(out)",
    srcs: [":libminijailng_gen_syscall_obj"],
    out: ["libsyscalls.c"],
}

cc_object {
    name: "libminijailng_gen_constants_obj",
    vendor_available: true,
    //recovery_available: true,
    srcs: ["gen_constants.c"],
    cflags: [
        "-dD",
        "-E",
        "-Wall",
        "-Werror",
    ],
}

cc_genrule {
    name: "libminijailng_gen_constants",
    vendor_available: true,
    //recovery_available: true,
    tool_files: ["gen_constants.sh"],
    cmd: "$(location gen_constants.sh) $(in) $(out)",
    srcs: [":libminijailng_gen_constants_obj"],
    out: ["libconstants.c"],
}

cc_library_static {
    name: "libminijailng_generated",
    vendor_available: true,
    //recovery_available: true,
    defaults: ["libminijailng_flags"],
    host_supported: true,

    target: {
        android: {
            //generated_sources: [
            //    "libminijailng_gen_syscall",
            //    "libminijailng_gen_constants",
            //],
            srcs: [
                "aarch64-linux-android/libsyscalls.gen.c",
                "aarch64-linux-android/libconstants.gen.c",
            ],
        },
        host: {
            srcs: [
                "linux-x86/libconstants.gen.c",
                "linux-x86/libsyscalls.gen.c",
            ],
        },
    },
}

// libminijailng shared and static library for target.
// =========================================================
cc_library {
    name: "libminijailng",
    host_supported: true,

    vendor_available: true,
    //recovery_available: true,
    vndk: {
        enabled: true,
    },

    defaults: ["libminijailng_flags"],

    srcs: libminijailSrcFiles,

    static: {
        whole_static_libs: ["libminijailng_generated"] + minijailCommonLibraries,
    },
    shared: {
        static_libs: ["libminijailng_generated"],
        shared_libs: minijailCommonLibraries,
    },
    export_include_dirs: ["."],

    target: {
        host: {
            cflags: [
                "-DPRELOADPATH=\"/invalidminijailngpreload.so\"",
            ],
        },
    },
}

// Example ASan-ified libminijailng shared library for target.
// Commented out since it's only needed for local debugging.
// =========================================================
//cc_library_shared {
//    name: "libminijailng_asan",
//    defaults: ["libminijailng_flags"],
//
//    sanitize: {
//        address: true,
//    },
//    relative_install_path: "asan",
//    srcs: libminijailSrcFiles,
//
//    static_libs: ["libminijailng_generated"],
//    shared_libs: minijailCommonLibraries,
//    export_include_dirs: ["."],
//}

// libminijailng native unit tests using gtest.
//
// For a device, run with:
// adb shell /data/nativetest/libminijailng_unittest_gtest/libminijailng_unittest_gtest
//
// For host, run with:
// out/host/linux-x86/nativetest(64)/libminijailng_unittest_gtest/libminijailng_unittest_gtest
// =========================================================
cc_test {
    name: "libminijailng_unittest_gtest",
    defaults: ["libminijailng_flags"],
    // TODO(b/31395668): Re-enable once the seccomp(2) syscall becomes available.
    //host_supported: true

    srcs: libminijailSrcFiles + ["libminijail_unittest.cc"] + unittestSrcFiles,

    static_libs: ["libminijailng_generated"],
    shared_libs: minijailCommonLibraries,

    target: {
        android: {
            cflags: ["-Wno-writable-strings"],
            test_suites: ["device-tests"],
        },
        host: {
            cflags: ["-DPRELOADPATH=\"/invalid\""],
        },
    },
}

// Syscall filtering native unit tests using gtest.
//
// For a device, run with:
// adb shell /data/nativetest/syscallng_filter_unittest_gtest/syscallng_filter_unittest_gtest
//
// For host, run with:
// out/host/linux-x86/nativetest(64)/syscallng_filter_unittest_gtest/syscallng_filter_unittest_gtest
// =========================================================
cc_test {
    name: "syscallng_filter_unittest_gtest",
    defaults: ["libminijailng_flags"],
    host_supported: true,

    srcs: [
        "bpf.c",
        "syscall_filter.c",
        "util.c",
        "syscall_filter_unittest.cc",
    ] + unittestSrcFiles,

    static_libs: ["libminijailng_generated"],
    shared_libs: minijailCommonLibraries,

    target: {
        android: {
            test_suites: ["device-tests"],
        },
    },
}

// System functionality unit tests using gtest.
//
// For a device, run with:
// adb shell /data/nativetest/mjng_system_unittest_gtest/mjng_system_unittest_gtest
//
// For host, run with:
// out/host/linux-x86/nativetest(64)/mjng_system_unittest_gtest/mjng_system_unittest_gtest
// =========================================================
cc_test {
    name: "mjng_system_unittest_gtest",
    defaults: ["libminijailng_flags"],
    host_supported: true,

    srcs: [
        "system.c",
        "util.c",
        "system_unittest.cc",
    ] + unittestSrcFiles,

    static_libs: ["libminijailng_generated"],
    shared_libs: minijailCommonLibraries,

    target: {
        android: {
            test_suites: ["device-tests"],
        },
    },
}

// Utility functionality unit tests using gtest.
//
// For a device, run with:
// adb shell /data/nativetest/mjng_util_unittest_gtest/mjng_util_unittest_gtest
//
// For host, run with:
// out/host/linux-x86/nativetest(64)/mjng_util_unittest_gtest/mjng_util_unittest_gtest
// =========================================================
cc_test {
    name: "mjng_util_unittest_gtest",
    defaults: ["libminijailng_flags"],
    host_supported: true,

    srcs: [
        "util.c",
        "util_unittest.cc",
    ] + unittestSrcFiles,

    static_libs: ["libminijailng_generated"],
    shared_libs: minijailCommonLibraries,

    target: {
        android: {
            test_suites: ["device-tests"],
        },
    },
}

// Utility functionality unit tests using gtest.
//
// For a device, run with:
// adb shell /data/nativetest/minijailng0_cli_unittest_gtest/minijailng0_cli_unittest_gtest
//
// For host, run with:
// out/host/linux-x86/nativetest(64)/minijailng0_cli_unittest_gtest/minijailng0_cli_unittest_gtest
// =========================================================
cc_test {
    name: "minijailng0_cli_unittest_gtest",
    defaults: ["libminijailng_flags"],
    host_supported: true,

    cflags: [
        "-DPRELOADPATH=\"/invalid\"",
    ],
    srcs: libminijailSrcFiles + [
        "elfparse.c",
        "minijail0_cli.c",
        "minijail0_cli_unittest.cc",
    ] + unittestSrcFiles,

    static_libs: ["libminijailng_generated"],
    shared_libs: minijailCommonLibraries,

    target: {
        android: {
            test_suites: ["device-tests"],
        },
    },
}

// libminijailng_test executable for brillo_Minijail test.
// =========================================================
cc_test {
    name: "libminijailng_test",
    defaults: ["libminijailng_flags"],
    test_suites: ["device-tests"],

    gtest: false,

    srcs: ["test/libminijail_test.cpp"],

    shared_libs: [
        "libbase",
        "libminijailng",
    ],
}

// libminijailng usage example.
// =========================================================
cc_binary {
    name: "drop_privsng",
    defaults: ["libminijailng_flags"],

    // Don't build with ASan, but leave commented out for easy local debugging.
    // sanitize: { address: true, },
    srcs: ["examples/drop_privs.cpp"],

    shared_libs: [
        "libbase",
        "libminijailng",
    ],
}

// minijailng0 executable.
// This is not currently used on Brillo/Android,
// but it's convenient to be able to build it.
// =========================================================
cc_binary {
    name: "minijailng0",
    defaults: ["libminijailng_flags"],
    host_supported: true,

    cflags: [
        "-DPRELOADPATH=\"/invalidminijailngpreload.so\"",
    ],
    srcs: [
        "elfparse.c",
        "minijail0.c",
        "minijail0_cli.c",
    ],

    static_libs: ["libminijailng_generated"],
    shared_libs: minijailCommonLibraries + ["libminijailng"],
}
