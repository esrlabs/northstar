// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

use regex::Regex;
use std::env;
use std::fs;
use std::io;
use std::io::Write;
use std::path;

/// This is a 1:1 port of gen_syscalls.sh in libminijail
fn generate_syscall_table() -> io::Result<path::PathBuf> {
    let artifact = path::PathBuf::from(env::var("OUT_DIR").unwrap()).join("libsyscalls.gen.c");

    let expanded = cc::Build::new()
        .flag("-dD")
        .flag("libminijail/gen_syscalls.c")
        .expand();
    let preproc = String::from_utf8(expanded).expect("Invalid compiler output");

    let mut out = fs::File::create(&artifact)?;
    writeln!(out, "/* GENERATED by build.rs */")?;
    writeln!(out, "#include <stddef.h>")?;
    writeln!(out, "#include <asm/unistd.h>")?;
    writeln!(out, "#include \"libsyscalls.h\"")?;
    writeln!(out, "const struct syscall_entry syscall_table[] = {{")?;

    let re = Regex::new("#define __(ARM_)?(NR_)([[:lower:]0-9_]*) (.*)$").expect("Invalid regex");
    preproc.lines().try_for_each(|line| -> io::Result<()> {
        if let Some(c) = re.captures(&line) {
            let nr = &c[2];
            let name = &c[3];
            writeln!(out, "#ifdef __{}{}", nr, name)?;
            writeln!(out, "{{ \"{}\", __{}{} }},", name, nr, name)?;
            writeln!(out, "#endif")?;
        }
        Ok(())
    })?;

    writeln!(out, "{{ NULL, -1 }},")?;
    writeln!(out, "}};")?;

    Ok(artifact)
}

fn main() -> io::Result<()> {
    let current_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let target_os = env::var("CARGO_CFG_TARGET_OS").expect("Failed to get CARGO_CFG_TARGET_OS");

    let target_os_dir = match target_os.as_str() {
        "linux" => "linux-x86",
        "android" => "aarch64-linux-android",
        _ => return Ok(()), // minijail cannot be built for non linux systems
    };

    cc::Build::new()
        .define("ALLOW_DEBUG_LOGGING", "1")
        .define("PRELOADPATH", "\"invalid\"")
        .flag("-Wno-implicit-function-declaration")
        .file(format!("libminijail/{}/libconstants.gen.c", target_os_dir))
        .file(generate_syscall_table()?)
        .file("libminijail/bpf.c")
        .file("libminijail/util.c")
        .file("libminijail/signal_handler.c")
        .file("libminijail/syscall_filter.c")
        .file("libminijail/syscall_wrapper.c")
        .file("libminijail/system.c")
        .file("libminijail/libminijail.c")
        .include(format!("{}/libminijail", current_dir))
        .compile("minijail");

    println!("cargo:rustc-link-lib=static=minijail");

    Ok(())
}
